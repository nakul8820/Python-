# -*- coding: utf-8 -*-
"""Unit_4_OOPS.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1c_VClJcI1MDjQNAcjlFVp2UhqKwIVFYt
"""

#Classes and objects:
class Bird:
  def display(self): #UDF
    print("My bird's name is", self.name,", it is of type ",self.btype,"& it's age is ", self.age)
  def __init__(self,btype,name, age): #constructor
    self.btype=btype
    self.name=name
    self.age=age
def main():
  sparrow=Bird("Sparrow","kuku",1.5)
  sparrow.display()
  parrot=Bird("Parrot","Blu",2)
  parrot.display()
  duck=Bird("Duck","Duckling",4)
  duck.display()
  cockaatoo = Bird("Coo1","coocoo",5)
  cockaatoo.display()
main()

class Example:
  def __init__(self, a, b):  #Constructor to the Example class
    self.a = a  #self keyword will assing the object to the same class under which it has been defined
    self.b = b
  def add(self):
    return self.a + self.b
e = Example(8 , 6)
print(e.add())

#simple Inheritance
'''
#Syntax of SingleLevel Inheritance
class class1:               #parent_class
    pass
class class2(class1):       #child_class
    pass
obj_name = class2()  #creating the object
'''

class Brands:               #parent_class
    brand_name_1 = "Amazon"
    brand_name_2 = "Ebay"
    brand_name_3 = "OLX"

class Products(Brands):       #child_class
    prod_1 = "Online Ecommerce Store"
    prod_2 = "Online Store"
    prod_3 = "Online Buy Sell Store"

obj_Prod = Products()          #Object_creation
print(obj_Prod.brand_name_1+" is an "+obj_Prod.prod_1)
print(obj_Prod.brand_name_2+" is an "+obj_Prod.prod_2)
print(obj_Prod.brand_name_3+" is an "+obj_Prod.prod_3)



'''
#Syntax_of_multilevel_inheritance
class A:
    pass
class B(A):
    pass
class C(B):
    pass
obj = C()
'''
#Multilevel Inheritance
class Brands:                      #parent_class
    brand_name_1 = "Amazon"
    brand_name_2 = "Ebay"
    brand_name_3 = "OLX"

class Products(Brands):            #child_class
    prod_1 = "Online Ecommerce Store"
    prod_2 = "Online Store"
    prod_3 = "Online Buy Sell Store"

class Popularity(Products):        #grand_child_class
    prod_1_popularity = 100
    prod_2_popularity = 70
    prod_3_popularity = 60

obj_1 = Popularity()          #Object_creation
print(obj_1.brand_name_1+" is an "+obj_1.prod_1+" with popularity of "+str(obj_1.prod_1_popularity))
print(obj_1.brand_name_2+" is an "+obj_1.prod_2+" with popularity of "+str(obj_1.prod_2_popularity))
print(obj_1.brand_name_3+" is an "+obj_1.prod_3+" with popularity of "+str(obj_1.prod_3_popularity))

#Multiple Inheritance
'''
#syntax_of_multiple_inheritance
class parent_1:
    pass
class parent_2:
    pass
class child(parent_1,parent_2):  more than one parent class is multiple Inh.
    pass
obj = child()
'''

class Brands:               #parent_class1
    brand_name_1 = "Amazon"
    brand_name_2 = "Ebay"
    brand_name_3 = "OLX"

class Products:            #Parent_class2
    prod_1 = "Online Ecommerce Store"
    prod_2 = "Online Store"
    prod_3 = "Online Buy Sell Store"

class Popularity(Brands,Products):  #child class inheriting both classes
    prod_1_popularity = 100
    prod_2_popularity = 70
    prod_3_popularity = 60

obj_1 = Popularity()          #Object_creation
print(obj_1.brand_name_1+" is an "+obj_1.prod_1+"With popularity of ", obj_1.prod_1_popularity)
print(obj_1.brand_name_2+" is an "+obj_1.prod_2+"With popularity of ", obj_1.prod_2_popularity)
print(obj_1.brand_name_3+" is an "+obj_1.prod_3+"With popularity of ", obj_1.prod_3_popularity)

'''
create two parent classes(P1, P2), and one child class(C).
create two member variables for both parent classes and child class.
call(print) them
''

#Hybrid Inheritance
class CEO:
  def CEO_print(self):
    print("In CEO Class")
class Director(CEO):
  def Director_print(self):
    print("In Director Class")
class Manager(Director):
  def Manager_print(self):
    print("In Manager Class")
class emp1(Manager):
  def emp1_print(self):
    print("In emp1 Class")
class emp2(Manager):
  def emp2_print(self):
    print("In emp2 Class")
  class peon(emp1, emp2):
    def peon_print(self):
      print("In peon Class")
obj=emp2()   #instantiating the object
obj_1=peon() # not for emp2
obj.Director_print()
obj.CEO_print()
obj.Manager_print()

#Encapsulation 1
class Computer:
    def __init__(self):    #Constructor
        self.__maxprice = 900
    def sell(self):
        print("Selling Price: {}".format(self.__maxprice))
    def setMaxPrice(self, price):
        self.__maxprice = price
c = Computer()
c.sell()
# change the price
c.__maxprice = 1000
c.sell() #no effect
# using setter function
c.setMaxPrice(1000)
c.sell()

#Encapsulation 2
class BankAccount:
    def __init__(self, owner, balance=0):
        self.owner = owner
        self._balance = balance  # Protected variable (by convention)

    def get_balance(self):
        return self._balance

    def deposit(self, amount):
        if amount > 0:
            self._balance += amount
            print(f"Deposited ${amount}")
        else:
            print("Invalid deposit amount!")

    def withdraw(self, amount):
        if 0 < amount <= self._balance:
            self._balance -= amount
            print(f"Withdrew ${amount}")
        else:
            print("Invalid or insufficient funds!")

# Using the class
account = BankAccount("Bob", 500)

print("Initial balance:", account.get_balance())

account.deposit(200)
print("Balance after deposit:", account.get_balance())

account.withdraw(100)
print("Balance after withdrawal:", account.get_balance())

# Direct access is technically possible, but discouraged
print("Direct access (not recommended):", account._balance)

#Polimorphism example 1 of len function
sName = 'ABC School'
print(len(sName)) #gives the length of string
school = ['Pankti', 'Pooja', 'Prachi']
print(len(school)) #len returning the length of the list
#Here, Count of characters, Items, Keys

#Polymorphism Example 2
print(len("Programiz"))
print(len(["Python", "Java", "C"])) #list
print(len({"Name": "John", "Address": "Nepal"}))  #key-value pair -->Dictionary

#polymorphism using class and object
class summ:
  def smm(a=0,b=100,c=0):
        return a+b+c
s= summ
print(s.smm()) #no argument passing still successfull
print(s.smm(11,11,11)) #3 args passing still successfull, Overriding
print(s.smm('a','b','c')) #args passed in string format